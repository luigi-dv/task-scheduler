generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model ApiKey {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  key         String   @unique
  expires     DateTime
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  surname       String?
  country       String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  stripe_customer_id       String?
  stripe_subscription_item String?
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  comments      Comment[]         @relation("comments")
  createdAssignments Assignment[] @relation("createdAssignments")
  assignments   Assignment[]      @relation("assignments")
  userConfig    UserConfig?
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  // API Keys
  tokens        ApiKey[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  title       String
  description String
  priority    Int
  deadline    DateTime

  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  type        String @default("comment")
  userId      String @db.ObjectId
  comment     String
  date        DateTime

  user        User @relation("comments", fields: [userId], references: [id])
}

model Assignment {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  type               String @default("assignment")
  assignedUserId     String @db.ObjectId
  createdUserId      String @db.ObjectId
  createdDate        DateTime

  assignedUser       User @relation("assignments", fields: [assignedUserId], references: [id])
  createdUser        User @relation("createdAssignments", fields: [createdUserId], references: [id])
}

model ActivityTags {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  type        String @default("tags")
  userId      String @db.ObjectId

  tags        Tag[]
  date        DateTime
}

model Tag {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  type            String @default("tags")
  title           String
  date            DateTime
  activityTagsId  String @db.ObjectId

  activityTags ActivityTags @relation(fields: [activityTagsId], references: [id])
}

model UserConfig {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  userId          String  @db.ObjectId @unique
  timezone        String
  activeStartHour Int
  activeEndHour   Int

  user   User @relation(fields: [userId], references: [id])
}